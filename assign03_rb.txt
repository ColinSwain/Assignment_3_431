Marcus Bollacker(1-2):

1. Given lambda expressions A and B, show a lambda expression for
 if A then false else B
 Simplify (i.e. apply any feasible beta-reduction) as much as possible.

If A then false else B 

Simplification: A false B

Proof:

If A = true

(λx.λy.x) false B

λy.false

If A = false

(λx.λy.y) false B

λy.y

B



2. Given lambda expressions A and B, show a lambda expression for
 A implies (not B)
 Simplify (i.e. apply any feasible beta-reduction) as much as possible

 
If A is true, then B is negated
If A is false, the result is true

Simplification: A (B false true) false

Proof: 

If A = true

(λx.λy.x) (B false true) false

(B false true)



If A = false

(λx.λy.y) (B false true) false

false



#Ryan B

# .) question 3

# (A and (not B)) or ((not A) and B)
# xor = λx.λy. x (->y) y

	#.) 3	
	(λx.λy. x (->y) y) A B
	

# .) question 4
(3x, 2y) = (2^n + 1, 2^n + 1)

=(3(2^n + 1) - 2(2^n + 1), 2^n + 1)
=(2^(n+1) + 1, 2^n + 1)
=(2^m + 1, 2^N + 1) ## let m = n+1

	#.)4 (2^m + 1, 2^N + 1) = ( 2^n+1 +1, 2^n +1 ).

	


Colin Swain

Question 5 rev ( inorder ( reflect x ) ) = inorder x:

Base Case: for Empty Tree [] as [] is minimal structure

	reflect [] -> [], inorder [] -> []. rev -> [] == inorder [] --> [] = []
	Empty set [] is equal to each other, Base case is proved.

Inductive Step:
	Now assuming that logic holds for l(left subtree) and r(right subtree) ie
	
	rev ( inorder ( reflect l ) ) = inorder l && rev ( inorder ( reflect r ) ) = inorder r

	Does rev ( inorder ( reflect Node(l,s,r) ) ) == inorder Node(l,s,r)?

	LHS = inorder Node(l,s,r) 
	   ->inorder(l) @ s @ inorder(r)
	
	RHS = reflect (Node(r , s, l) -> rev (inorder Node(reflect r, s, reflect l)
	    -> rev( inorder reflect r @ s inorder reflect l)
	-> after reversing we get inorder reflect l @ s @ inorder reflect of l
	In this case the reflect is stored to represent having more leaves of the
	tree, but effectively can be rewritten as inorder l @ s @ inorder r

	RHS == LHS, passes structural induction
		
Question 6  postorder ( reflect x ) = rev ( preorder x )

Base Case for Empty set as minimal structure is
	LHS
	reflect [] ->, postorder -> []	
	RHS
	preorder [] -> [], rev [] -> []

	[] == [], passes Base Case;
Inductive Step:
	Assume true for both l and right subtree, ie holding base case proof for l and r,
	IH == postorder ( reflect l ) = rev ( preorder l )
		postorder ( reflect r ) = rev ( preorder r )
	
	LHS
	postorder( reflect Node(l,s,r) -> postorder(Node(reflect r, s, reflect l)
	->postorder(reflect r) @ postorder( reflect l) @ s
	
	RHS
	rev( preorder Node(r,s,l) ) ->rev(s @ preorder l @ prouder r)
	-> preorder r @preorder l @ s

	
	
	furthermore once proved and using IH we find that 
	preorder r @ preorder l @ s == preorder r @ preorder l @ s



